{"ast":null,"code":"var _jsxFileName = \"/Users/sophiesun/Desktop/weather-app-react-master/src/components/App.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport SearchCity from './SearchCity';\nimport device from '../responsive/Device';\nimport Result from './Result';\nimport NotFound from './NotFound';\nconst AppTitle = styled.h1`\n  display: block;\n  height: 64px;\n  margin: 0;\n  padding: 20px 0;\n  font-size: 20px;\n  text-transform: uppercase;\n  font-weight: 400;\n  color: #ffffff;\n  transition: 0.3s 1.4s;\n  opacity: ${({\n  showLabel\n}) => showLabel ? 1 : 0};\n\n  ${({\n  secondary\n}) => secondary && `\n    opacity: 1;\n    height: auto;\n    position: relative;\n    padding: 20px 0;\n    font-size: 30px;\n    top: 20%;\n    text-align: center;\n    transition: .5s;\n    @media ${device.tablet} {\n      font-size: 40px;\n    }\n    @media ${device.laptop} {\n      font-size: 50px;\n    }\n    @media ${device.laptopL} {\n      font-size: 60px;\n    }\n    @media ${device.desktop} {\n      font-size: 70px;\n    }\n    \n  `}\n\n  ${({\n  showResult\n}) => showResult && `\n    opacity: 0;\n    visibility: hidden;\n    top: 10%;\n  `}\n`;\nconst WeatherWrapper = styled.div`\n  max-width: 1500px;\n  margin: 0 auto;\n  height: calc(100vh - 64px);\n  width: 100%;\n  position: relative;\n`;\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: '',\n      weatherInfo: null,\n      error: false\n    };\n\n    this.handleInputChange = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.handleSearchCity = e => {\n      e.preventDefault();\n      const value = this.state.value;\n      const APIkey = '0ba780d6cec40db425a1441f23ca21a9';\n      const weather = `https://api.openweathermap.org/data/2.5/weather?q=${value}&APPID=${APIkey}&units=metric`;\n      const forecast = `https://api.openweathermap.org/data/2.5/forecast?q=${value}&APPID=${APIkey}&units=metric`;\n      Promise.all([fetch(weather), fetch(forecast)]).then(([res1, res2]) => {\n        if (res1.ok && res2.ok) {\n          return Promise.all([res1.json(), res2.json()]);\n        }\n\n        throw Error(res1.statusText, res2.statusText);\n      }).then(([data1, data2]) => {\n        const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'Nocvember', 'December'];\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const currentDate = new Date();\n        console.log(currentDate);\n        console.log(currentDate.getMonth());\n        const date = `${days[currentDate.getDay()]} ${currentDate.getDate()} ${months[currentDate.getMonth()]}`;\n        const sunset = new Date(data1.sys.sunset * 1000).toLocaleTimeString().slice(0, 5);\n        const sunrise = new Date(data1.sys.sunrise * 1000).toLocaleTimeString().slice(0, 5);\n        const weatherInfo = {\n          city: data1.name,\n          country: data1.sys.country,\n          date,\n          description: data1.weather[0].description,\n          main: data1.weather[0].main,\n          temp: data1.main.temp,\n          highestTemp: data1.main.temp_max,\n          lowestTemp: data1.main.temp_min,\n          sunrise,\n          sunset,\n          clouds: data1.clouds.all,\n          humidity: data1.main.humidity,\n          wind: data1.wind.speed,\n          forecast: data2.list\n        };\n        this.setState({\n          weatherInfo,\n          error: false\n        });\n      }).catch(error => {\n        console.log(error);\n        this.setState({\n          error: true,\n          weatherInfo: null\n        });\n      });\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          value = _this$state.value,\n          weatherInfo = _this$state.weatherInfo,\n          error = _this$state.error;\n    return React.createElement(React.Fragment, null, React.createElement(AppTitle, {\n      showLabel: (weatherInfo || error) && true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Weather app456\"), React.createElement(WeatherWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(AppTitle, {\n      secondary: true,\n      showResult: (weatherInfo || error) && true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Weather app123\"), React.createElement(SearchCity, {\n      value: value,\n      showResult: (weatherInfo || error) && true,\n      change: this.handleInputChange,\n      submit: this.handleSearchCity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), weatherInfo && React.createElement(Result, {\n      weather: weatherInfo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), error && React.createElement(NotFound, {\n      error: error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sophiesun/Desktop/weather-app-react-master/src/components/App.js"],"names":["React","styled","SearchCity","device","Result","NotFound","AppTitle","h1","showLabel","secondary","tablet","laptop","laptopL","desktop","showResult","WeatherWrapper","div","App","Component","state","value","weatherInfo","error","handleInputChange","e","setState","target","handleSearchCity","preventDefault","APIkey","weather","forecast","Promise","all","fetch","then","res1","res2","ok","json","Error","statusText","data1","data2","months","days","currentDate","Date","console","log","getMonth","date","getDay","getDate","sunset","sys","toLocaleTimeString","slice","sunrise","city","name","country","description","main","temp","highestTemp","temp_max","lowestTemp","temp_min","clouds","humidity","wind","speed","list","catch","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,QAAQ,GAAGL,MAAM,CAACM,EAAG;;;;;;;;;;aAUd,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoBA,SAAS,GAAG,CAAH,GAAO,CAAG;;IAEhD,CAAC;AAAEC,EAAAA;AAAF,CAAD,KACAA,SAAS,IACR;;;;;;;;;aASQN,MAAM,CAACO,MAAO;;;aAGdP,MAAM,CAACQ,MAAO;;;aAGdR,MAAM,CAACS,OAAQ;;;aAGfT,MAAM,CAACU,OAAQ;;;;GAIxB;;IAEA,CAAC;AAAEC,EAAAA;AAAF,CAAD,KACAA,UAAU,IACT;;;;GAID;CA5CJ;AA+CA,MAAMC,cAAc,GAAGd,MAAM,CAACe,GAAI;;;;;;CAAlC;;AAQA,MAAMC,GAAN,SAAkBjB,KAAK,CAACkB,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,KADgC,GACxB;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,WAAW,EAAE,IAFP;AAGNC,MAAAA,KAAK,EAAE;AAHD,KADwB;;AAAA,SAOhCC,iBAPgC,GAOZC,CAAC,IAAI;AACvB,WAAKC,QAAL,CAAc;AACZL,QAAAA,KAAK,EAAEI,CAAC,CAACE,MAAF,CAASN;AADJ,OAAd;AAGD,KAX+B;;AAAA,SAahCO,gBAbgC,GAabH,CAAC,IAAI;AACtBA,MAAAA,CAAC,CAACI,cAAF;AADsB,YAEdR,KAFc,GAEJ,KAAKD,KAFD,CAEdC,KAFc;AAGtB,YAAMS,MAAM,GAAG,kCAAf;AAEA,YAAMC,OAAO,GAAI,qDAAoDV,KAAM,UAASS,MAAO,eAA3F;AACA,YAAME,QAAQ,GAAI,sDAAqDX,KAAM,UAASS,MAAO,eAA7F;AAEAG,MAAAA,OAAO,CAACC,GAAR,CAAY,CAACC,KAAK,CAACJ,OAAD,CAAN,EAAiBI,KAAK,CAACH,QAAD,CAAtB,CAAZ,EACGI,IADH,CACQ,CAAC,CAACC,IAAD,EAAOC,IAAP,CAAD,KAAkB;AACtB,YAAID,IAAI,CAACE,EAAL,IAAWD,IAAI,CAACC,EAApB,EAAwB;AACtB,iBAAON,OAAO,CAACC,GAAR,CAAY,CAACG,IAAI,CAACG,IAAL,EAAD,EAAcF,IAAI,CAACE,IAAL,EAAd,CAAZ,CAAP;AACD;;AACD,cAAMC,KAAK,CAACJ,IAAI,CAACK,UAAN,EAAkBJ,IAAI,CAACI,UAAvB,CAAX;AACD,OANH,EAOGN,IAPH,CAOQ,CAAC,CAACO,KAAD,EAAQC,KAAR,CAAD,KAAoB;AACxB,cAAMC,MAAM,GAAG,CACb,SADa,EAEb,UAFa,EAGb,OAHa,EAIb,OAJa,EAKb,KALa,EAMb,MANa,EAOb,MAPa,EAQb,QARa,EASb,WATa,EAUb,SAVa,EAWb,WAXa,EAYb,UAZa,CAAf;AAcA,cAAMC,IAAI,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgC,WAAhC,EAA6C,UAA7C,EAAyD,QAAzD,EAAmE,UAAnE,CAAb;AACA,cAAMC,WAAW,GAAG,IAAIC,IAAJ,EAApB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAYH,WAAW,CAACI,QAAZ,EAAZ;AACA,cAAMC,IAAI,GAAI,GAAEN,IAAI,CAACC,WAAW,CAACM,MAAZ,EAAD,CAAuB,IAAGN,WAAW,CAACO,OAAZ,EAAsB,IAClET,MAAM,CAACE,WAAW,CAACI,QAAZ,EAAD,CACP,EAFD;AAGA,cAAMI,MAAM,GAAG,IAAIP,IAAJ,CAASL,KAAK,CAACa,GAAN,CAAUD,MAAV,GAAmB,IAA5B,EAAkCE,kBAAlC,GAAuDC,KAAvD,CAA6D,CAA7D,EAAgE,CAAhE,CAAf;AACA,cAAMC,OAAO,GAAG,IAAIX,IAAJ,CAASL,KAAK,CAACa,GAAN,CAAUG,OAAV,GAAoB,IAA7B,EAAmCF,kBAAnC,GAAwDC,KAAxD,CAA8D,CAA9D,EAAiE,CAAjE,CAAhB;AAEA,cAAMpC,WAAW,GAAG;AAClBsC,UAAAA,IAAI,EAAEjB,KAAK,CAACkB,IADM;AAElBC,UAAAA,OAAO,EAAEnB,KAAK,CAACa,GAAN,CAAUM,OAFD;AAGlBV,UAAAA,IAHkB;AAIlBW,UAAAA,WAAW,EAAEpB,KAAK,CAACZ,OAAN,CAAc,CAAd,EAAiBgC,WAJZ;AAKlBC,UAAAA,IAAI,EAAErB,KAAK,CAACZ,OAAN,CAAc,CAAd,EAAiBiC,IALL;AAMlBC,UAAAA,IAAI,EAAEtB,KAAK,CAACqB,IAAN,CAAWC,IANC;AAOlBC,UAAAA,WAAW,EAAEvB,KAAK,CAACqB,IAAN,CAAWG,QAPN;AAQlBC,UAAAA,UAAU,EAAEzB,KAAK,CAACqB,IAAN,CAAWK,QARL;AASlBV,UAAAA,OATkB;AAUlBJ,UAAAA,MAVkB;AAWlBe,UAAAA,MAAM,EAAE3B,KAAK,CAAC2B,MAAN,CAAapC,GAXH;AAYlBqC,UAAAA,QAAQ,EAAE5B,KAAK,CAACqB,IAAN,CAAWO,QAZH;AAalBC,UAAAA,IAAI,EAAE7B,KAAK,CAAC6B,IAAN,CAAWC,KAbC;AAclBzC,UAAAA,QAAQ,EAAEY,KAAK,CAAC8B;AAdE,SAApB;AAgBA,aAAKhD,QAAL,CAAc;AACZJ,UAAAA,WADY;AAEZC,UAAAA,KAAK,EAAE;AAFK,SAAd;AAID,OApDH,EAqDGoD,KArDH,CAqDSpD,KAAK,IAAI;AACd0B,QAAAA,OAAO,CAACC,GAAR,CAAY3B,KAAZ;AAEA,aAAKG,QAAL,CAAc;AACZH,UAAAA,KAAK,EAAE,IADK;AAEZD,UAAAA,WAAW,EAAE;AAFD,SAAd;AAID,OA5DH;AA6DD,KAlF+B;AAAA;;AAoFhCsD,EAAAA,MAAM,GAAG;AAAA,wBAC+B,KAAKxD,KADpC;AAAA,UACCC,KADD,eACCA,KADD;AAAA,UACQC,WADR,eACQA,WADR;AAAA,UACqBC,KADrB,eACqBA,KADrB;AAEP,WACE,0CACE,oBAAC,QAAD;AAAU,MAAA,SAAS,EAAE,CAACD,WAAW,IAAIC,KAAhB,KAA0B,IAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AAAU,MAAA,SAAS,MAAnB;AAAoB,MAAA,UAAU,EAAE,CAACD,WAAW,IAAIC,KAAhB,KAA0B,IAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAIE,oBAAC,UAAD;AACE,MAAA,KAAK,EAAEF,KADT;AAEE,MAAA,UAAU,EAAE,CAACC,WAAW,IAAIC,KAAhB,KAA0B,IAFxC;AAGE,MAAA,MAAM,EAAE,KAAKC,iBAHf;AAIE,MAAA,MAAM,EAAE,KAAKI,gBAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAUGN,WAAW,IAAI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAEA,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVlB,EAWGC,KAAK,IAAI,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAEA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXZ,CAFF,CADF;AAkBD;;AAxG+B;;AA2GlC,eAAeL,GAAf","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport SearchCity from './SearchCity';\nimport device from '../responsive/Device';\nimport Result from './Result';\nimport NotFound from './NotFound';\n\nconst AppTitle = styled.h1`\n  display: block;\n  height: 64px;\n  margin: 0;\n  padding: 20px 0;\n  font-size: 20px;\n  text-transform: uppercase;\n  font-weight: 400;\n  color: #ffffff;\n  transition: 0.3s 1.4s;\n  opacity: ${({ showLabel }) => (showLabel ? 1 : 0)};\n\n  ${({ secondary }) =>\n    secondary &&\n    `\n    opacity: 1;\n    height: auto;\n    position: relative;\n    padding: 20px 0;\n    font-size: 30px;\n    top: 20%;\n    text-align: center;\n    transition: .5s;\n    @media ${device.tablet} {\n      font-size: 40px;\n    }\n    @media ${device.laptop} {\n      font-size: 50px;\n    }\n    @media ${device.laptopL} {\n      font-size: 60px;\n    }\n    @media ${device.desktop} {\n      font-size: 70px;\n    }\n    \n  `}\n\n  ${({ showResult }) =>\n    showResult &&\n    `\n    opacity: 0;\n    visibility: hidden;\n    top: 10%;\n  `}\n`;\n\nconst WeatherWrapper = styled.div`\n  max-width: 1500px;\n  margin: 0 auto;\n  height: calc(100vh - 64px);\n  width: 100%;\n  position: relative;\n`;\n\nclass App extends React.Component {\n  state = {\n    value: '',\n    weatherInfo: null,\n    error: false,\n  };\n\n  handleInputChange = e => {\n    this.setState({\n      value: e.target.value,\n    });\n  };\n\n  handleSearchCity = e => {\n    e.preventDefault();\n    const { value } = this.state;\n    const APIkey = '0ba780d6cec40db425a1441f23ca21a9';\n\n    const weather = `https://api.openweathermap.org/data/2.5/weather?q=${value}&APPID=${APIkey}&units=metric`;\n    const forecast = `https://api.openweathermap.org/data/2.5/forecast?q=${value}&APPID=${APIkey}&units=metric`;\n\n    Promise.all([fetch(weather), fetch(forecast)])\n      .then(([res1, res2]) => {\n        if (res1.ok && res2.ok) {\n          return Promise.all([res1.json(), res2.json()]);\n        }\n        throw Error(res1.statusText, res2.statusText);\n      })\n      .then(([data1, data2]) => {\n        const months = [\n          'January',\n          'February',\n          'March',\n          'April',\n          'May',\n          'June',\n          'July',\n          'August',\n          'September',\n          'October',\n          'Nocvember',\n          'December',\n        ];\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const currentDate = new Date();\n        console.log(currentDate)\n        console.log(currentDate.getMonth())\n        const date = `${days[currentDate.getDay()]} ${currentDate.getDate()} ${\n          months[currentDate.getMonth()]\n        }`;\n        const sunset = new Date(data1.sys.sunset * 1000).toLocaleTimeString().slice(0, 5);\n        const sunrise = new Date(data1.sys.sunrise * 1000).toLocaleTimeString().slice(0, 5);\n\n        const weatherInfo = {\n          city: data1.name,\n          country: data1.sys.country,\n          date,\n          description: data1.weather[0].description,\n          main: data1.weather[0].main,\n          temp: data1.main.temp,\n          highestTemp: data1.main.temp_max,\n          lowestTemp: data1.main.temp_min,\n          sunrise,\n          sunset,\n          clouds: data1.clouds.all,\n          humidity: data1.main.humidity,\n          wind: data1.wind.speed,\n          forecast: data2.list,\n        };\n        this.setState({\n          weatherInfo,\n          error: false,\n        });\n      })\n      .catch(error => {\n        console.log(error);\n\n        this.setState({\n          error: true,\n          weatherInfo: null,\n        });\n      });\n  };\n\n  render() {\n    const { value, weatherInfo, error } = this.state;\n    return (\n      <>\n        <AppTitle showLabel={(weatherInfo || error) && true}>Weather app456</AppTitle>\n        <WeatherWrapper>\n          <AppTitle secondary showResult={(weatherInfo || error) && true}>\n            Weather app123\n          </AppTitle>\n          <SearchCity\n            value={value}\n            showResult={(weatherInfo || error) && true}\n            change={this.handleInputChange}\n            submit={this.handleSearchCity}\n          />\n          {weatherInfo && <Result weather={weatherInfo} />}\n          {error && <NotFound error={error} />}\n        </WeatherWrapper>\n      </>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}