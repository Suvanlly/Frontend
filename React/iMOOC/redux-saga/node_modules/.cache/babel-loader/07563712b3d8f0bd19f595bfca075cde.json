{"ast":null,"code":"var _jsxFileName = \"/Users/sophiesun/Desktop/todolist/src/TodoList.js\";\nimport React, { Component, Fragment } from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport axios from 'axios';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TodoList extends Component {\n  // 当使用组件的时候，constructor的优先级最高，是最优先被执行的函数\n  // constructor(props)是接受props参数，super(props)调用父类props的方法\n  constructor(props) {\n    super(props); // this.state表示这个组件的状态，react里需要把数据定义在状态里 负责存储component里面的数据\n\n    this.state = {\n      inputValue: \"\",\n      // 这是输入框里input value的值\n      list: [] //这是列表里面的每一项\n\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleBtnClick = this.handleBtnClick.bind(this);\n    this.handleItemDelete = this.handleItemDelete.bind(this);\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // Fragment可以代替div实现外层包裹，从而不影响布局，并且不会产生无用的div盒子\n      _jsxDEV(Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"insertArea\",\n            children: \"Input here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            // 当render执行的时候，input里面的value被渲染成了this.state.inputValue的值\n            id: \"insertArea\",\n            className: \"input\",\n            value: this.state.inputValue //加大括号是因为this.state.inputValue 是JS表达式，在JSX语法中使用JS表达式需要大括号\n            // 当你在Input框里输入内容的时候，onChange就会被执行，监听Input框里的值的变化，并且事件绑定的时候需要用 bind(this)对函数的作用域进行变更\n            ,\n            onChange: this.handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handleBtnClick,\n            children: \" Submit \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: this.getTodoItem()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }, this)\n    );\n  } // 生命周期函数，只在组件被挂载到页面上时执行一次\n  // AJAX请求就放在componentDidMount里 不会有任何问题最合适\n\n\n  componentDidMount() {\n    axios.get('/api/todolist').then(() => {\n      alert('success');\n    }).catch(() => {\n      alert('error');\n    });\n  }\n\n  getTodoItem() {\n    return this.state.list.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(TodoItem, {\n        content: item,\n        index: index,\n        deleteItem: this.handleItemDelete\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this);\n    });\n  }\n\n  handleInputChange(e) {\n    // 如果想改变State里面的数据项的内容，不能直接更改，需要通过setState来进行变更\n    // 你在Input框里输入的什么内容可以从e.target.value获取到，并用setState把InputValue的值设置成你输入的内容，随之页面也会改变\n    const value = e.target.value;\n    this.setState(() => ({\n      // React里面必须使用this.setState来改变State里面的数据\n      inputValue: value\n    }));\n  }\n\n  handleBtnClick() {\n    this.setState(prevState => ({\n      list: [...prevState.list, prevState.inputValue],\n      inputValue: ''\n    }));\n  }\n\n  handleItemDelete(index) {\n    // 需要利用const先拷贝出一个副本，不能直接修改State里的内容，因为immutable特性\n    this.setState(prevState => {\n      const list = [...prevState.list];\n      list.splice(index, 1);\n      return {\n        list\n      };\n    });\n  }\n\n}\n\nexport default TodoList; // export default把该组件导出","map":{"version":3,"sources":["/Users/sophiesun/Desktop/todolist/src/TodoList.js"],"names":["React","Component","Fragment","TodoItem","axios","TodoList","constructor","props","state","inputValue","list","handleInputChange","bind","handleBtnClick","handleItemDelete","render","getTodoItem","componentDidMount","get","then","alert","catch","map","item","index","e","value","target","setState","prevState","splice"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport axios from 'axios';\nimport './style.css';\n\nclass TodoList extends Component {\n  // 当使用组件的时候，constructor的优先级最高，是最优先被执行的函数\n  // constructor(props)是接受props参数，super(props)调用父类props的方法\n  constructor(props) {\n    super(props);\n    // this.state表示这个组件的状态，react里需要把数据定义在状态里 负责存储component里面的数据\n    this.state = {\n      inputValue: \"\", // 这是输入框里input value的值\n      list: [] //这是列表里面的每一项\n    }\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleBtnClick = this.handleBtnClick.bind(this);\n    this.handleItemDelete = this.handleItemDelete.bind(this);\n  }\n  \n  render() {\n    return (\n      // Fragment可以代替div实现外层包裹，从而不影响布局，并且不会产生无用的div盒子\n      <Fragment>\n        <div>\n         <label htmlFor=\"insertArea\">Input here</label>\n          <input\n            // 当render执行的时候，input里面的value被渲染成了this.state.inputValue的值\n            id=\"insertArea\"\n            className='input'\n            value={this.state.inputValue} //加大括号是因为this.state.inputValue 是JS表达式，在JSX语法中使用JS表达式需要大括号\n            // 当你在Input框里输入内容的时候，onChange就会被执行，监听Input框里的值的变化，并且事件绑定的时候需要用 bind(this)对函数的作用域进行变更\n            onChange={this.handleInputChange}\n            /> \n          <button onClick={this.handleBtnClick}> Submit </button>\n        </div>\n        <ul > \n          {this.getTodoItem()}\n        </ul>\n      </Fragment>\n    )\n  }\n  // 生命周期函数，只在组件被挂载到页面上时执行一次\n  // AJAX请求就放在componentDidMount里 不会有任何问题最合适\n  componentDidMount() {\n    axios.get('/api/todolist')\n    .then(()=>{alert('success')})\n    .catch(()=>{alert('error')})\n  }\n\n  getTodoItem() {\n    return this.state.list.map((item, index) => {\n      return (\n          <TodoItem \n            key={index}\n            content={item} \n            index={index}\n            deleteItem={this.handleItemDelete}\n          /> \n      )\n    })\n  }\n\n  handleInputChange(e) {\n    // 如果想改变State里面的数据项的内容，不能直接更改，需要通过setState来进行变更\n    // 你在Input框里输入的什么内容可以从e.target.value获取到，并用setState把InputValue的值设置成你输入的内容，随之页面也会改变\n    const value = e.target.value;\n\t\tthis.setState(() => ({\n    // React里面必须使用this.setState来改变State里面的数据\n\t\t\tinputValue: value\n\t\t}));\n  }\n  handleBtnClick() {\n    this.setState((prevState) => ({\n\t\t\tlist: [...prevState.list, prevState.inputValue],\n\t\t\tinputValue: ''\n\t\t}));\n  }\n  handleItemDelete(index) {\n    // 需要利用const先拷贝出一个副本，不能直接修改State里的内容，因为immutable特性\n    this.setState((prevState) => {\n\t\t\tconst list = [...prevState.list];\n\t\t\tlist.splice(index, 1);\n\t\t\treturn {list}\n\t\t});\n  }\n}\n\nexport default TodoList;\n// export default把该组件导出\n"]},"metadata":{},"sourceType":"module"}