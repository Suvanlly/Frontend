{"ast":null,"code":"var _jsxFileName = \"/Users/sophiesun/Desktop/todolist/src/TodoList.js\";\nimport React, { Component, Fragment } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TodoList extends Component {\n  // constructor的优先级最高\n  constructor(props) {\n    super(props); // state 负责存储component里面的数据\n\n    this.state = {\n      inputValue: '',\n      // 这是程序初始化的时候input value的值\n      list: ['hello', 'nnn']\n    };\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // Fragment可以代替div 从而不影响布局\n      _jsxDEV(Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            // 当render执行的时候，input里面的value被渲染成了this.state.inputValue的值\n            value: this.state.inputValue // 当你在Input框里输入内容的时候，onChange就会被执行，并且事件绑定的时候需要用 bind(this)对函数的作用域进行变更\n            ,\n            onChange: this.handleInputChange.bind(this) //JSX里面如果需要用JS的表达式，需要用大括号包起来\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handleBtnClick.bind(this),\n            children: \" Submit \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: this.state.list.map((item, index) => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              onClick: this.handleItemDelete.bind(this, index),\n              children: item\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n  handleInputChange(e) {\n    // 如果想改变State里面的数据项的内容，不能直接更改，需要通过setState来进行变更\n    this.setState({\n      inputValue: e.target.value // 你在Input框里输入的什么内容可以从e.target.value获取到，并用setState把InputValue的值设置成你输入的内容，随之页面也会改变\n\n    });\n  }\n\n  handleBtnClick() {\n    this.setState({\n      list: [...this.state.list, this.state.inputValue],\n      inputValue: '' //输入以后把input框清空\n\n    });\n  }\n\n  handleItemDelete(index) {\n    const list = [...this.state.list];\n    list.splice(index, 1);\n  }\n\n}\n\nexport default TodoList; // export default把该组件导出","map":{"version":3,"sources":["/Users/sophiesun/Desktop/todolist/src/TodoList.js"],"names":["React","Component","Fragment","TodoList","constructor","props","state","inputValue","list","render","handleInputChange","bind","handleBtnClick","map","item","index","handleItemDelete","e","setState","target","value","splice"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAEA,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAC/B;AACAG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAEjB;;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAC,EADA;AACI;AACfC,MAAAA,IAAI,EAAE,CAAC,OAAD,EAAS,KAAT;AAFK,KAAb;AAID;;AAEDC,EAAAA,MAAM,GAAG;AACP;AAAA;AACE;AACA,cAAC,QAAD;AAAA,gCACE;AAAA,kCACE;AACA;AACC,YAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,UAFnB,CAGA;AAHA;AAIC,YAAA,QAAQ,EAAE,KAAKG,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAJX,CAI8C;;AAJ9C;AAAA;AAAA;AAAA;AAAA,kBADF,eAOE;AAAQ,YAAA,OAAO,EAAE,KAAKC,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAUE;AAAA,oBAEI,KAAKL,KAAL,CAAWE,IAAX,CAAgBK,GAAhB,CAAoB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACnC,gCACE;AAAgB,cAAA,OAAO,EAAE,KAAKC,gBAAL,CAAsBL,IAAtB,CAA2B,IAA3B,EAAiCI,KAAjC,CAAzB;AAAA,wBACCD;AADD,eAASC,KAAT;AAAA;AAAA;AAAA;AAAA,oBADF;AAKD,WAND;AAFJ;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAyBD;;AACDL,EAAAA,iBAAiB,CAACO,CAAD,EAAI;AACnB;AACA,SAAKC,QAAL,CAAe;AACbX,MAAAA,UAAU,EAAEU,CAAC,CAACE,MAAF,CAASC,KADR,CAEb;;AAFa,KAAf;AAID;;AACDR,EAAAA,cAAc,GAAG;AACf,SAAKM,QAAL,CAAe;AACbV,MAAAA,IAAI,EAAE,CAAC,GAAG,KAAKF,KAAL,CAAWE,IAAf,EAAqB,KAAKF,KAAL,CAAWC,UAAhC,CADO;AAEbA,MAAAA,UAAU,EAAE,EAFC,CAEE;;AAFF,KAAf;AAID;;AACDS,EAAAA,gBAAgB,CAACD,KAAD,EAAQ;AACtB,UAAMP,IAAI,GAAG,CAAC,GAAG,KAAKF,KAAL,CAAWE,IAAf,CAAb;AACAA,IAAAA,IAAI,CAACa,MAAL,CAAYN,KAAZ,EAAmB,CAAnB;AACD;;AAtD8B;;AAyDjC,eAAeZ,QAAf,C,CACA","sourcesContent":["import React, { Component, Fragment } from 'react';\n\nclass TodoList extends Component {\n  // constructor的优先级最高\n  constructor(props) {\n    super(props);\n    // state 负责存储component里面的数据\n    this.state = {\n      inputValue:'', // 这是程序初始化的时候input value的值\n      list: ['hello','nnn']\n    }\n  }\n\n  render() {\n    return (\n      // Fragment可以代替div 从而不影响布局\n      <Fragment>\n        <div>\n          <input \n          // 当render执行的时候，input里面的value被渲染成了this.state.inputValue的值\n           value={this.state.inputValue}\n          // 当你在Input框里输入内容的时候，onChange就会被执行，并且事件绑定的时候需要用 bind(this)对函数的作用域进行变更\n           onChange={this.handleInputChange.bind(this)} //JSX里面如果需要用JS的表达式，需要用大括号包起来\n          />\n          <button onClick={this.handleBtnClick.bind(this)}> Submit </button>\n        </div>\n        <ul>\n          {\n            this.state.list.map((item, index) => {\n              return (\n                <li key={index} onClick={this.handleItemDelete.bind(this, index)}> \n                {item} \n                </li>\n              )\n            })\n          }\n        </ul>\n      </Fragment>\n    );\n  }\n  handleInputChange(e) {\n    // 如果想改变State里面的数据项的内容，不能直接更改，需要通过setState来进行变更\n    this.setState ({\n      inputValue: e.target.value\n      // 你在Input框里输入的什么内容可以从e.target.value获取到，并用setState把InputValue的值设置成你输入的内容，随之页面也会改变\n    })\n  }\n  handleBtnClick() {\n    this.setState ({\n      list: [...this.state.list, this.state.inputValue],\n      inputValue: '' //输入以后把input框清空\n    })\n  }\n  handleItemDelete(index) {\n    const list = [...this.state.list];\n    list.splice(index, 1)\n  }\n}\n\nexport default TodoList;\n// export default把该组件导出\n"]},"metadata":{},"sourceType":"module"}