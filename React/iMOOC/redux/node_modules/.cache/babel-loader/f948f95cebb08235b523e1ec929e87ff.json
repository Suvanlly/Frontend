{"ast":null,"code":"var _jsxFileName = \"/Users/sophiesun/Desktop/Frontend/React/iMOOC/redux/src/TodoList.js\";\nimport React, { Component } from 'react';\nimport 'antd/dist/antd.css';\nimport { Input, Button, List } from 'antd';\nimport store from './store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TodoList extends Component {\n  // 调用store里面的数据\n  constructor(props) {\n    super(props);\n    this.state = store.getState();\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleStoreChange = this.handleStoreChange.bind(this);\n    this.handleBtnClick = this.handleBtnClick.bind(this); // 让组件订阅store的数据，只要store的数据发生变化，subscribe里面的函数就自动被执行\n\n    store.subscribe(this.handleStoreChange); // console.log(store.getState())\n  }\n\n  handleInputChange(e) {\n    // 创建action，type里面描述做什么事（这里是告诉store改变input value），value就是改变成e.target.value\n    const action = {\n      type: 'change_input_value',\n      value: e.target.value\n    };\n    store.dispatch(action); // 把这个action传给store\n    // 打印出input改变的值\n    // console.log(e.target.value);\n  }\n\n  handleBtnClick() {\n    const action = {\n      type: 'add_todo_item'\n    };\n    store.dispatch(action);\n  }\n\n  handleStoreChange() {\n    // 当感知到store数据变化时，用getStore方法重新调取store里面的数据，\n    // 用setState替换掉当前的store里面的数据，这样组件的数据就和store里面同步\n    this.setState(store.getState());\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px',\n        marginLeft: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          value: this.state.inputValue,\n          placeholder: \"todo info\",\n          style: {\n            width: '300px',\n            marginRight: '10px'\n          },\n          onChange: this.handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          onClick: this.handleBtnClick,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        style: {\n          marginTop: '10px',\n          width: '300px'\n        },\n        bordered: true,\n        dataSource: this.state.list,\n        renderItem: item => /*#__PURE__*/_jsxDEV(List.Item, {\n          children: item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 31\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default TodoList;","map":{"version":3,"sources":["/Users/sophiesun/Desktop/Frontend/React/iMOOC/redux/src/TodoList.js"],"names":["React","Component","Input","Button","List","store","TodoList","constructor","props","state","getState","handleInputChange","bind","handleStoreChange","handleBtnClick","subscribe","e","action","type","value","target","dispatch","setState","render","marginTop","marginLeft","inputValue","width","marginRight","list","item"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,oBAAP;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,IAAxB,QAAoC,MAApC;AACA,OAAOC,KAAP,MAAkB,SAAlB;;;AAEA,MAAMC,QAAN,SAAuBL,SAAvB,CAAiC;AAE/B;AACAM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAaJ,KAAK,CAACK,QAAN,EAAb;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBD,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKE,cAAL,GAAsB,KAAKA,cAAL,CAAoBF,IAApB,CAAyB,IAAzB,CAAtB,CALiB,CAMjB;;AACAP,IAAAA,KAAK,CAACU,SAAN,CAAgB,KAAKF,iBAArB,EAPiB,CAQjB;AACD;;AAEDF,EAAAA,iBAAiB,CAACK,CAAD,EAAI;AACnB;AACA,UAAMC,MAAM,GAAG;AACbC,MAAAA,IAAI,EAAE,oBADO;AAEbC,MAAAA,KAAK,EAAEH,CAAC,CAACI,MAAF,CAASD;AAFH,KAAf;AAIAd,IAAAA,KAAK,CAACgB,QAAN,CAAeJ,MAAf,EANmB,CAMK;AACxB;AACA;AACD;;AAEDH,EAAAA,cAAc,GAAG;AACf,UAAMG,MAAM,GAAG;AACbC,MAAAA,IAAI,EAAE;AADO,KAAf;AAGAb,IAAAA,KAAK,CAACgB,QAAN,CAAeJ,MAAf;AACD;;AAEDJ,EAAAA,iBAAiB,GAAG;AAClB;AACA;AACA,SAAKS,QAAL,CAAcjB,KAAK,CAACK,QAAN,EAAd;AACD;;AAEDa,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,SAAS,EAAE,MAAZ;AAAoBC,QAAAA,UAAU,EAAE;AAAhC,OAAZ;AAAA,8BACE;AAAA,gCACE,QAAC,KAAD;AACE,UAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWiB,UADpB;AAEE,UAAA,WAAW,EAAC,WAFd;AAGE,UAAA,KAAK,EAAE;AAACC,YAAAA,KAAK,EAAE,OAAR;AAAiBC,YAAAA,WAAW,EAAE;AAA9B,WAHT;AAIE,UAAA,QAAQ,EAAE,KAAKjB;AAJjB;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,SAAb;AAAuB,UAAA,OAAO,EAAE,KAAKG,cAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAUE,QAAC,IAAD;AACE,QAAA,KAAK,EAAE;AAACU,UAAAA,SAAS,EAAE,MAAZ;AAAoBG,UAAAA,KAAK,EAAE;AAA3B,SADT;AAEE,QAAA,QAAQ,MAFV;AAGE,QAAA,UAAU,EAAE,KAAKlB,KAAL,CAAWoB,IAHzB;AAIE,QAAA,UAAU,EAAEC,IAAI,iBAAI,QAAC,IAAD,CAAM,IAAN;AAAA,oBAAYA;AAAZ;AAAA;AAAA;AAAA;AAAA;AAJtB;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAmBD;;AA1D8B;;AA6DjC,eAAexB,QAAf","sourcesContent":["import React, {Component} from 'react';\nimport 'antd/dist/antd.css';\nimport { Input, Button, List } from 'antd';\nimport store from './store';\n\nclass TodoList extends Component {\n\n  // 调用store里面的数据\n  constructor(props) {\n    super(props);\n    this.state = store.getState()\n    this.handleInputChange = this.handleInputChange.bind(this)\n    this.handleStoreChange = this.handleStoreChange.bind(this)\n    this.handleBtnClick = this.handleBtnClick.bind(this)\n    // 让组件订阅store的数据，只要store的数据发生变化，subscribe里面的函数就自动被执行\n    store.subscribe(this.handleStoreChange)\n    // console.log(store.getState())\n  }\n\n  handleInputChange(e) {\n    // 创建action，type里面描述做什么事（这里是告诉store改变input value），value就是改变成e.target.value\n    const action = {\n      type: 'change_input_value',\n      value: e.target.value\n    }\n    store.dispatch(action); // 把这个action传给store\n    // 打印出input改变的值\n    // console.log(e.target.value);\n  }\n\n  handleBtnClick() {\n    const action = {\n      type: 'add_todo_item'\n    }\n    store.dispatch(action);\n  }\n\n  handleStoreChange() {\n    // 当感知到store数据变化时，用getStore方法重新调取store里面的数据，\n    // 用setState替换掉当前的store里面的数据，这样组件的数据就和store里面同步\n    this.setState(store.getState());\n  }\n\n  render() {\n    return (\n      <div style={{marginTop: '10px', marginLeft: '10px'}}>\n        <div>\n          <Input \n            value={this.state.inputValue} \n            placeholder='todo info' \n            style={{width: '300px', marginRight: '10px'}}\n            onChange={this.handleInputChange}\n          />\n          <Button type=\"primary\" onClick={this.handleBtnClick}>Submit</Button>\n        </div>\n        <List\n          style={{marginTop: '10px', width: '300px'}}\n          bordered\n          dataSource={this.state.list}\n          renderItem={item => <List.Item>{item}</List.Item>}\n        />\n      </div>\n    )\n  }\n}\n\nexport default TodoList;\n"]},"metadata":{},"sourceType":"module"}